# -*- coding: utf-8 -*-
"""flaskfile

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m0LO6XTh5S4YT6OxQ4529v-fWI--3mWO
"""

!pip install flask-ngrok

cd /content/drive/MyDrive/Colab Notebooks/ChatDEI

from flask_ngrok import run_with_ngrok
from flask import Flask, request, render_template
import pickle
import nbformat
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

import os
modelPath = '/content/drive/MyDrive/Colab Notebooks/ChatDEI/'

# tokenizer = pickle.load(open("cv.pkl", "rb")) #file name + directory; THIS IS FROM TUTORIAL
# model = pickle.load(open("clf.pkl", "rb")) #ACTUAL WILL BE DIFFERENT bc not using pickle

# create flask app
app = Flask(__name__)

@app.route('/', methods=['GET'])
def home():
  return render_template("index.html")

@app.route('/predict', methods=['POST'])
def predict():
  message = request.form.get('message')
  tokenized_message = tokenizer.transform(message)
  predictions = model.predict(tokenized_message)

  return render_template("index.html", predictions)


if __name__ == '__main__': #bug here; cannot access link
    app.run(port = 3000, debug=True)

# Import necessary libraries
from your_model_library import load_model  # Replace with the actual library you are using for the model



# Load your model and tokenizer
model = load_model('path/to/your/model.h5')  # Replace with the path to your model file

# Create Flask app
app = Flask(__name__)

@app.route('/', methods=['GET'])
def home():
    return render_template("index.html")

@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        message = request.form.get('message')
        predictions = model.predict(message)

        # Assuming predictions is a dictionary containing the results
        # You may need to adjust this part based on the structure of your predictions
        predictions_result = predictions['your_result_key']

        return render_template("index.html", predictions=predictions_result)

if __name__ == '__main__':
    app.run(port=3000, debug=True)